/* Beam Scan -- control stepper motor and smaple analog input. 
 digipot on 1-wire bus controls amplification */

#include <Wire.h>
#define pot_address 0x2F // I2C MCP4018 is 0x2F or 0101111 
#define MAX_BUFFER 8
#define TIME_OUT 5000

// buffer the command in byte buffer 
int buffer[MAX_BUFFER];
int commandSize = 0;
int val = 0;

// defines for setting and clearing register bits
#ifndef cbi
#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#endif
#ifndef sbi
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
#endif

/* init the chip */
void setup() {
  pinMode(0, INPUT); 
  pinMode(12, OUTPUT); 
  digitalWrite(12, LOW);   
  pinMode(11, INPUT); 

  // set prescale to 16
  sbi(ADCSRA,ADPS2);
  cbi(ADCSRA,ADPS1) ;
  cbi(ADCSRA,ADPS0) ;

  // ready comm lines 
  Serial.begin(115200);
  Wire.begin();
  
  //Serial.println("<reset pin 11.........>"); 
 
  // ensure motor ready 
  home();
}

/** set digipot controlling the amp */
void amp(int val){
  Serial.println("<amp " + (String)val + ">");
 
  // Wire.begin(); 
  Wire.beginTransmission(pot_address);   
  Wire.write(val);                
  Wire.endTransmission();    
  
 // Serial.println("<amp done>");
}

/** */
void test(){
  int i = 0;
  for( ; i < 127 ; i++) {
    amp(i);
    delay(300);
  }
  for( ; i > 0  ; i--) {
    amp(i);
    delay(300);
  }
}

/** */
void home(){
  long start = millis();
  while(digitalRead(11) == 1) {
    digitalWrite(12,HIGH);
    if((millis()-start)>600){
       Serial.println("<fault>");
       break; // error, leave motor on
    }
  }
  
  digitalWrite(12,LOW);
  Serial.println("<home>");
}

/** take a single scan */
void scan(){

  home();
  delay(50);

  Serial.println("<start>");
  long go = millis();

  // get off limit switch 
  while(digitalRead(11) == 0) {
    digitalWrite(12,HIGH);
    if((millis()-go)>50) {
      Serial.println("<limit>");
      home(); 
      break; 
    }
  }
  
  // scan while no limit pressed  
  while(digitalRead(11) == 1) {
   // Serial.println("<" + (String)analogRead(0) + ">"); 
    if((millis()-go)>600) {
      Serial.println("<fault>");
      home(); 
      break; 
    }
  }

  // stop 
  digitalWrite(12,LOW);
  Serial.println("<done " + (String)(millis()-go) + ">");
}

/* take serial commands */
void loop() {
  while(Serial.available() > 0){
    int input = Serial.read();
    if((input == 13) || (input == 10)){
      if(commandSize > 0){
        parseCommand();
        commandSize = 0; 
      }
    } 
    else {
      buffer[commandSize++] = input;
      if(commandSize >= MAX_BUFFER)
        commandSize = 0;
    }
  }
}

/* */
void parseCommand(){
  if(buffer[0] == 'a'){
    amp(buffer[1]);
  }
  else if(buffer[0] == 'w'){
    test();
  }
  else if(buffer[0] == 'q'){
    scan();
  }
  else if(buffer[0] == 'x'){
    Serial.println("<id:beamscan>");
  }
  else if(buffer[0] == 'y'){
    Serial.println("<version:10.5.2>"); 
  }   
}
















